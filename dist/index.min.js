var l=class o{constructor(e,t,s,i){this.value=e,this.label=t,this.disabled=s,this.selected=i}static fromObject(e){var t,s;return new o(e.value,e.label,(t=e.disabled)!==null&&t!==void 0?t:!1,(s=e.selected)!==null&&s!==void 0?s:!1)}static fromOption(e){return new o(e.value,e.innerText,e.disabled,e.selected)}};var a=class extends CustomEvent{constructor(e){super("change",{detail:e,bubbles:!0,cancelable:!0})}},d=class{constructor(e,t=[],s={}){this.shadowInput=null,this.options=[],this.isOpen=!1,this.initNode(e),this.options=t.length===0&&this.shadowInput!==null?Array.from(this.shadowInput.querySelectorAll("option")).map(i=>l.fromOption(i)):t.map(i=>l.fromObject(i)),this.config=Object.assign({placeholder:"Select option",searchable:!1,clearable:!1},s),this.init()}init(){this.initSelectButton(),this.initDropdown(),this.initSearchInput(),this.renderOptions(),this.outsideClickHandler=this.handleOutsideClick.bind(this),document.addEventListener("click",this.outsideClickHandler)}initNode(e){if(typeof e=="string"){let s=document.querySelector(e);if(s===null)throw new Error(`Element with selector "${e}" not found`);if(!(s instanceof HTMLDivElement)&&!(s instanceof HTMLSelectElement))throw new Error("Only HTMLDivElement and HTMLSelectElement are supported.");e=s}let t=null;if(e instanceof HTMLSelectElement){if(t=document.createElement("div"),e.parentElement===null)throw new Error("Shadow input must have a parent element");e.parentElement.insertBefore(t,e),this.shadowInput=e,this.shadowInput.classList.add("lobster-select__shadow-node"),t.classList.add("has-shadow-node")}else t=e;if(t.classList.contains("lobster-select"))throw new Error(`Element with selector "${e}" already initialized`);this.node=t,this.node.classList.add("lobster-select")}initDropdown(){this.dropdown=document.createElement("div"),this.dropdown.classList.add("lobster-select__dropdown"),this.node.appendChild(this.dropdown)}initSelectButton(){this.selectButton=document.createElement("div"),this.selectButton.classList.add("lobster-select__button"),this.buttonText=document.createElement("span"),this.buttonText.classList.add("lobster-select__button-text"),this.buttonText.textContent=this.config.placeholder;let e=document.createElement("span");if(e.classList.add("lobster-select__button-arrow"),this.config.clearable){let t=document.createElement("span");t.classList.add("lobster-select__clear-button"),t.addEventListener("click",s=>{s.stopPropagation(),this.clear();let i=new a({value:"",label:""});this.node.dispatchEvent(i)}),this.selectButton.appendChild(t),this.node.classList.add("lobster-select--clearable")}this.selectButton.appendChild(this.buttonText),this.selectButton.appendChild(e),this.node.appendChild(this.selectButton),this.selectButton.addEventListener("click",()=>this.toggle())}initSearchInput(){if(!this.config.searchable)return;let e=document.createElement("div");e.classList.add("lobster-select__search"),this.searchInput=document.createElement("input"),this.searchInput.type="text",this.searchInput.placeholder="Search...",this.searchInput.classList.add("lobster-select__search-input"),e.appendChild(this.searchInput),this.dropdown.appendChild(e),this.searchInput.addEventListener("input",()=>this.handleSearch())}renderOptions(){let e=document.createElement("div");e.classList.add("lobster-select__options"),this.options.forEach(s=>{let i=document.createElement("div");if(i.classList.add("lobster-select__option"),s.disabled?i.classList.add("lobster-select__option--disabled"):i.addEventListener("click",()=>this.selectOption(s)),s.selected)if(i.classList.add("lobster-select__option--selected"),this.selectedOption===void 0)this.selectedOption=s,this.setButtonText(s.label);else throw new Error("Select can't contain more than one chosen option");i.textContent=s.label,e.appendChild(i)});let t=this.dropdown.querySelector(".lobster-select__options");t&&this.dropdown.removeChild(t),this.dropdown.appendChild(e)}handleSearch(){if(!this.searchInput)return;let e=this.searchInput.value.toLowerCase(),t=this.options.filter(i=>i.label.toLowerCase().includes(e)),s=this.dropdown.querySelector(".lobster-select__options");s&&(s.innerHTML="",t.forEach(i=>{let n=document.createElement("div");n.classList.add("lobster-select__option"),i.disabled&&n.classList.add("lobster-select__option--disabled"),n.textContent=i.label,i.disabled||n.addEventListener("click",()=>this.selectOption(i)),s.appendChild(n)}))}selectOption(e){this.selectedOption=e,this.setButtonText(e.label),this.node.classList.add("has-value"),this.dropdown.querySelectorAll(".lobster-select__option").forEach((s,i)=>{let n=this.options[i].value===e.value;s.classList.toggle("lobster-select__option--selected",n)}),this.close(),this.shadowInput!==null&&(this.shadowInput.value=e.value);let t=new a({value:e.value,label:e.label});this.node.dispatchEvent(t)}toggle(){this.isOpen?this.close():this.open()}open(){this.isOpen=!0,this.node.classList.add("lobster-select--open"),this.searchInput&&this.searchInput.focus()}close(){this.isOpen=!1,this.node.classList.remove("lobster-select--open"),this.searchInput&&(this.searchInput.value="",this.renderOptions())}handleOutsideClick(e){this.node.contains(e.target)||this.close()}getValue(){var e;return(e=this.selectedOption)===null||e===void 0?void 0:e.value}setValue(e){let t=this.options.find(s=>s.value===e);t&&this.selectOption(t)}clear(e=!1){if(!this.config.clearable&&!e){console.warn("Clearable is disabled");return}this.selectedOption=void 0,this.setButtonText(),this.node.classList.remove("has-value"),this.dropdown.querySelectorAll(".lobster-select__option").forEach(s=>{s.classList.remove("lobster-select__option--selected")}),this.shadowInput!==null&&(this.shadowInput.value="")}updateOptions(e){this.options=e.map(t=>l.fromObject(t)),this.renderOptions()}disable(){this.node.classList.add("lobster-select--disabled"),this.selectButton.removeEventListener("click",()=>this.toggle())}enable(){this.node.classList.remove("lobster-select--disabled"),this.selectButton.addEventListener("click",()=>this.toggle())}destroy(){this.node.innerHTML="",this.node.classList.remove(...this.node.classList),this.shadowInput!==null&&this.shadowInput.classList.remove("lobster-select__shadow-node"),this.outsideClickHandler!==null&&document.removeEventListener("click",this.outsideClickHandler)}setButtonText(e=null){var t;this.buttonText!==void 0&&(this.buttonText.textContent=(t=e??this.config.placeholder)!==null&&t!==void 0?t:"")}};export{d as Select};
//# sourceMappingURL=index.min.js.map
